{
 "Resources": {
  "MyInputBucket62169C0F": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "input-bucket-sr-dev",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT",
        "POST",
        "DELETE"
       ],
       "AllowedOrigins": [
        "http://localhost:3000"
       ],
       "ExposedHeaders": []
      }
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyInputBucket/Resource"
   }
  },
  "MyOutputBucket5134A15E": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "output-bucket-sr-dev",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT",
        "POST",
        "DELETE"
       ],
       "AllowedOrigins": [
        "http://localhost:3000"
       ],
       "ExposedHeaders": []
      }
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyOutputBucket/Resource"
   }
  },
  "MyTable794EDED1": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    },
    "StreamSpecification": {
     "StreamViewType": "NEW_IMAGE"
    },
    "TableName": "FileTable"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyTable/Resource"
   }
  },
  "MyLambdaServiceRole4539ECB6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyLambda/ServiceRole/Resource"
   }
  },
  "MyLambdaServiceRoleDefaultPolicy5BBC6F68": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MyTable794EDED1",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MyLambdaServiceRoleDefaultPolicy5BBC6F68",
    "Roles": [
     {
      "Ref": "MyLambdaServiceRole4539ECB6"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "MyLambdaCCE802FB": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "d715e66a00493d57c811727a9b9e5dd454c0fcc97478073408fdd01b1f35c7fb.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "MyLambdaServiceRole4539ECB6",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "MyLambdaServiceRoleDefaultPolicy5BBC6F68",
    "MyLambdaServiceRole4539ECB6"
   ],
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyLambda/Resource",
    "aws:asset:path": "asset.d715e66a00493d57c811727a9b9e5dd454c0fcc97478073408fdd01b1f35c7fb",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "MyApi49610EDF": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "CorsConfiguration": {
     "AllowHeaders": [
      "*"
     ],
     "AllowMethods": [
      "POST",
      "OPTIONS"
     ],
     "AllowOrigins": [
      "*"
     ]
    },
    "Description": "This is an API for uploading file",
    "Name": "My API",
    "ProtocolType": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyApi/Resource"
   }
  },
  "MyApiDefaultStageB2EF93C6": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "MyApi49610EDF"
    },
    "AutoDeploy": true,
    "StageName": "$default"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyApi/DefaultStage/Resource"
   }
  },
  "MyApiPOSTfileLambdaIntegration6A97DC15": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "MyApi49610EDF"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::GetAtt": [
      "MyLambdaCCE802FB",
      "Arn"
     ]
    },
    "PayloadFormatVersion": "2.0"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyApi/POST--file/LambdaIntegration/Resource"
   }
  },
  "MyApiPOSTfileLambdaIntegrationPermission0429AB06": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "MyLambdaCCE802FB",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyApi49610EDF"
       },
       "/*/*/file"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyApi/POST--file/LambdaIntegration-Permission"
   }
  },
  "MyApiPOSTfile3C3347E7": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "MyApi49610EDF"
    },
    "AuthorizationType": "NONE",
    "RouteKey": "POST /file",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "MyApiPOSTfileLambdaIntegration6A97DC15"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/MyApi/POST--file/Resource"
   }
  },
  "EventProcessorLambdaServiceRole3543255F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/EventProcessorLambda/ServiceRole/Resource"
   }
  },
  "EventProcessorLambdaServiceRoleDefaultPolicy3D29BCED": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:ListStreams",
        "ec2:DescribeInstances",
        "ec2:RunInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "iam:PassRole",
        "ssm:SendCommand"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MyTable794EDED1",
         "StreamArn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EventProcessorLambdaServiceRoleDefaultPolicy3D29BCED",
    "Roles": [
     {
      "Ref": "EventProcessorLambdaServiceRole3543255F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/EventProcessorLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "EventProcessorLambda24D09AB9": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c5c4617a16ee5f549b9c424b6c45d28fa8bb5a590a81936f598e68a3522b948b.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "EventProcessorLambdaServiceRole3543255F",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 600
   },
   "DependsOn": [
    "EventProcessorLambdaServiceRoleDefaultPolicy3D29BCED",
    "EventProcessorLambdaServiceRole3543255F"
   ],
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/EventProcessorLambda/Resource",
    "aws:asset:path": "asset.c5c4617a16ee5f549b9c424b6c45d28fa8bb5a590a81936f598e68a3522b948b",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "EventProcessorLambdaEventInvokeConfig9967030C": {
   "Type": "AWS::Lambda::EventInvokeConfig",
   "Properties": {
    "FunctionName": {
     "Ref": "EventProcessorLambda24D09AB9"
    },
    "MaximumRetryAttempts": 0,
    "Qualifier": "$LATEST"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/EventProcessorLambda/EventInvokeConfig/Resource"
   }
  },
  "EventProcessorLambdaDynamoDBEventSourceMyCdkStackMyTableEDC5794A6881D458": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 1,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "MyTable794EDED1",
      "StreamArn"
     ]
    },
    "FunctionName": {
     "Ref": "EventProcessorLambda24D09AB9"
    },
    "StartingPosition": "LATEST"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/EventProcessorLambda/DynamoDBEventSource:MyCdkStackMyTableEDC5794A/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VPy26DMBD8ltydLUmk3hPUKjlUikjv0QIL2gA2Yg0RsvzvlU36Ps3szOxrC5vdMyQrvMu6KJt1yzm4i8WiUXiXq5MduMNYNGRVWukHW+CAQl6Vs8bOlDm4d8xbCqlIvGqxy0sE9zrqwrLRwfrJzzR0LBKql4m0PenJNJQaXXEd/P9iVC5mHAp6w75n/Z37pXrF2IHLzHJPxLNpuZjj3si8kt0VRcgK7AMo7LlGS3ecpy24o7X9vufQECCUF4t1HLiQIGVmtAs7aUv1gJ/P/SljznuVkcRDVVwZ5jye+DLSSqdGlxw6vdKmJLjJ07RNYJNAsroJ83oYteWOIFvwA9czbOHEAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "MyCdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}